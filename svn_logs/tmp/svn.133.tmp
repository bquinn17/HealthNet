"""
Authors: Bryan Quinn, Andrew Fountain, Chris Cassidy, Chris Cifolelli, Nahjee Sowah
"""

from django import forms

from widget.widgets import DateTimeWidget
from .models import *


class PatientRegistrationForm(forms.ModelForm):
    """
    class_object: PatientRegistrationForm(forms.ModelForm)
    Sub_Class:Meta
    Methods: clean_phone_number, clean_password
    """

    class Meta:
        model = Patient
        fields = (
            'email', 'first_name', 'last_name', 'password', 'medical_information', 'phone_number', 'insurance_provider',
            'insurance_id', 'address', 'emergency_contact_phone_number', 'emergency_contact_name', "main_hospital")

    email = forms.CharField(max_length=50, required=True, widget=forms.TextInput(attrs={'class': 'form-control'}))
    first_name = forms.CharField(max_length=50, required=True,
                                 widget=forms.TextInput(attrs={'class': 'form-control'}))
    last_name = forms.CharField(max_length=50, required=True,
                                widget=forms.TextInput(attrs={'class': 'form-control'}))
    address = forms.CharField(max_length=100, required=False,
                              widget=forms.TextInput(attrs={'class': 'form-control'}))
    phone_number = forms.CharField(max_length=10, required=False,
                                   widget=forms.TextInput(attrs={'class': 'form-control'}))
    insurance_id = forms.CharField(max_length=10, required=True,
                                   widget=forms.TextInput(attrs={'class': 'form-control'}))
    insurance_provider = forms.CharField(max_length=30, required=True,
                                         widget=forms.TextInput(attrs={'class': 'form-control'}))
    main_hospital = forms.ModelChoiceField(queryset=Hospital.objects.all(), required=True, widget=forms.Select(
        attrs={'class': 'selectpicker show-tick form-control', 'required': ''}), empty_label="<Hospital>")

    # CHOICES = (('1', 'Current Patient'), ('2', 'Not a Current Patient'))
    # emergency_contact_type = forms.MultipleChoiceField(choices=CHOICES, widget=forms.RadioSelect)

    emergency_contact_name = forms.CharField(max_length=50, required=False,
                                             widget=forms.TextInput(attrs={'class': 'form-control'}))
    emergency_contact_phone_number = forms.CharField(max_length=10, required=False,
                                                     widget=forms.TextInput(attrs={'class': 'form-control'}))
    password = forms.CharField(widget=forms.PasswordInput(attrs={'class': 'form-control'}))
    medical_information = forms.FileField(required=False, widget=forms.FileInput(attrs={'class': 'form-control'}))

    def clean_phone_number(self):
        """
            function:clean_phone_number
            -gives limitations for phone number field

            params: the registration form object
            -feeds data in to validate/clean

            variables:
            -

            postconditions
            -data has been validated
            """
        data = self.cleaned_data['phone_number']
        if len(data) >= 16:
            raise forms.ValidationError("Please enter a phone number of length less than 16")
        if any((not character.isdigit()) for character in data):
            raise forms.ValidationError("Only numbers please....")
        # Always return the cleaned data, whether you have changed it or not.
        return data

    def clean_first_name(self):  # doesn't allow letters in fist name
        data = self.cleaned_data['first_name']
        if any((character == "<" or character == ">" or character == ";") for character in data):
            raise forms.ValidationError("Only letters please")
        return data

    def clean_last_name(self):  # doesn't allow numbers in last name
        data = self.cleaned_data['last_name']
        if any((character == "<" or character == ">" or character == ";") for character in data):
            raise forms.ValidationError("Only letters please")
        return data

    def clean_emergency_contact_name(self):  # doesn't allow numbers in emergency contact name
        data = self.cleaned_data['emergency_contact_name']
        if data != '':  # only if they actually entered this in
            if any(character.isdigit() for character in data):
                raise forms.ValidationError("Only letters or spaces, please")
        return data

    def clean_emergency_contact_phone_number(self):  # doesn't allow letters in emergency contact phone number
        data = self.cleaned_data['emergency_contact_phone_number']
        if data != '':  # only if they entered this in the form
            if any((not character.isdigit()) for character in data):
                raise forms.ValidationError("Only numbers please")
        return data

    def clean_password(self):
        """
            function:clean_password
            -gives limitations for password

            params: the registration form object
            -feeds data in to validate/clean

            variables:
            -postconditions
            -data has been validated
        """
        data = self.cleaned_data['password']
        if len(data) < 7:
            raise forms.ValidationError("Your password is too short")
        # Always return the cleaned data, whether you have changed it or not.
        return data


class PatientUpdateForm(forms.ModelForm):
    """
    class_object: PatientUpdateForm(forms.ModelForm)
    Sub_Class:Meta
    """

    class Meta:
        model = Patient
        fields = ('first_name', 'last_name', 'phone_number', 'emergency_contact_name',
                  'emergency_contact_phone_number', 'address')  # , "main_hospital")

    first_name = forms.CharField(max_length=25, required=True,
                                 widget=forms.TextInput(attrs={'class': 'form-control'}))
    last_name = forms.CharField(max_length=25, required=True,
                                widget=forms.TextInput(attrs={'class': 'form-control'}))
    address = forms.CharField(max_length=100, required=False,
                              widget=forms.TextInput(attrs={'class': 'form-control'}))
    phone_number = forms.CharField(max_length=10, required=False,
                                   widget=forms.TextInput(attrs={'class': 'form-control'}))
    emergency_contact_name = forms.CharField(max_length=50, required=False,
                                             widget=forms.TextInput(attrs={'class': 'form-control'}))
    emergency_contact_phone_number = forms.CharField(max_length=10, required=False,
                                                     widget=forms.TextInput(attrs={'class': 'form-control'}))

    def clean_phone_number(self):
        """
            function:clean_phone_number
            -gives limitations for phone number field

            params: the registration form object
            -feeds data in to validate/clean

            variables:
            -

            postconditions
            -data has been validated
            """
        data = self.cleaned_data['phone_number']
        if len(data) >= 16:
            raise forms.ValidationError("Please enter a phone number of length less than 16")
        if any((not character.isdigit()) for character in data):
            raise forms.ValidationError("Only numbers please....")
        # Always return the cleaned data, whether you have changed it or not.
        return data

    def clean_first_name(self):  # doesn't allow letters in fist name
        data = self.cleaned_data['first_name']
        if any((character == "<" or character == ">" or character == ";") for character in data):
            raise forms.ValidationError("Only letters please")
        return data

    def clean_last_name(self):  # doesn't allow numbers in last name
        data = self.cleaned_data['last_name']
        if any((character == "<" or character == ">" or character == ";") for character in data):
            raise forms.ValidationError("Only letters please")
        return data

    def clean_emergency_contact_name(self):  # doesn't allow numbers in emergency contact name
        data = self.cleaned_data['emergency_contact_name']
        if data != '':  # only if they actually entered this in
            if any(character.isdigit() for character in data):
                raise forms.ValidationError("Only letters or spaces, please")
        return data

    def clean_emergency_contact_phone_number(self):  # doesn't allow letters in emergency contact phone number
        data = self.cleaned_data['emergency_contact_phone_number']
        if data != '':  # only if they entered this in the form
            if any((not character.isdigit()) for character in data):
                raise forms.ValidationError("Only numbers please")
        return data


class AppointmentForm(forms.ModelForm):
    """
    class_object: PatientRegistrationForm(forms.ModelForm)
    Sub_Class:Meta
    Methods: clean_phone_number, clean_password
    """

    class Meta:
        model = Appointment
        fields = ('hospital', 'start_date', 'end_date', 'description')

    hospital = forms.ModelChoiceField(queryset=Hospital.objects.all(), required=True, widget=forms.Select(
        attrs={'class': 'selectpicker show-tick form-control', 'required': ''}),
                                      empty_label="<Hospital>")

    start_date = forms.DateTimeField(initial=str(timezone.now())[:19])
    end_date = forms.DateTimeField(initial=str(timezone.now() + timezone.timedelta(hours=1))[:19])
    description = forms.CharField(max_length=100, required=True, initial="(Description)",
                                  widget=forms.TextInput(attrs={'class': 'form-control'}))

    def __str__(self):
        return str(self.description) + " - " + str(self.hospital)

    def clean_description(self):  # doesn't allow numbers in description
        data = self.cleaned_data['description']
        if any((character == "<" or character == ">" or character == ";") for character in data):
            raise forms.ValidationError("Only letters please")
        return data

    def clean(self):
        cleaned_data = super(AppointmentForm, self).clean()
        start_date = self.cleaned_data['start_date']
        end_date = self.cleaned_data['end_date']
        if 'patient' in self.cleaned_data:
            patient = self.cleaned_data['patient']
        else:
            patient = self.patient
            # patient = Patient.objects.filter(id=self.patient)

        if 'doctor' in self.cleaned_data:
            doctor = self.cleaned_data['doctor']
        else:
            doctor = Doctor.objects.filter(id=self.doctor)[0]

        hospital = self.cleaned_data['hospital']

        act_start_date = start_date
        # timezone.make_aware(datetime.datetime.strptime(str(start_date), "%m/%d/%Y %I:%M %p"),
        # timezone.get_default_timezone())

        act_end_date = end_date
        # timezone.make_aware(datetime.datetime.strptime(str(end_date), "%m/%d/%Y %I:%M %p"),
        # timezone.get_default_timezone())
        print(doctor)
        has_hospital = False
        for h in doctor.hospitals.all():
            if h == hospital:
                has_hospital = True
                break

        if not has_hospital:
            print("That Doctor is not available at that hospital.")
            raise forms.ValidationError("That Doctor is not available at that hospital.")

        for appointment in Appointment.objects.filter(patient=patient):
            if act_start_date < appointment.start_date < act_end_date or \
                                    act_start_date < appointment.end_date < act_end_date:
                print("That Patient is not available at that time.")
                raise forms.ValidationError("That Patient is not available at that time.")

        for appointment in Appointment.objects.filter(doctor=doctor):
            if act_start_date < appointment.start_date < act_end_date or \
                                    act_start_date < appointment.end_date < act_end_date:
                print("That Doctor is not available at that time.")
                raise forms.ValidationError("That Doctor is not available at that time.")
        return cleaned_data


class PatientAppointment(forms.ModelForm, AppointmentForm):
    """
        class_object: PatientAppoitment(forms.ModelForm)
        Sub_Class:Meta
        Methods: clean_description
    """

    class Meta:
        model = Appointment
        fields = ('doctor', 'hospital', 'start_date', 'end_date', 'description')

    start_date = forms.DateTimeField(widget=DateTimeWidget(), initial=str(timezone.now())[:16])
    end_date = forms.DateTimeField(widget=DateTimeWidget(),
                                   initial=str(timezone.now() + timezone.timedelta(hours=1))[:16])
    doctor = forms.ModelChoiceField(queryset=Doctor.objects.all(), required=False, widget=forms.Select(
        attrs={'class': 'selectpicker show-tick form-control', 'required': ''}),
                                    empty_label="<Doctor>")
    hospital = forms.ModelChoiceField(queryset=Hospital.objects.all(), required=True, widget=forms.Select(
        attrs={'class': 'selectpicker show-tick form-control', 'required': ''}),
                                      empty_label="<Hospital>")
    description = forms.CharField(max_length=100, required=True, initial="(Description)",
                                  widget=forms.TextInput(attrs={'class': 'form-control'}))

    def __init__(self, patient=None, *args, **kwargs):
        super(PatientAppointment, self).__init__(*args, **kwargs)
        if patient:
            self.patient = patient
        self.fields.keyOrder = ['doctor', 'hospital', 'start_date', 'end_date', 'description']

    def clean_description(self):  # doesn't allow numbers in last name
        data = self.cleaned_data['description']
        if any((character == "<" or character == ">" or character == ";") for character in data):
            raise forms.ValidationError("Only letters please")
        return data


class DoctorAppointment(forms.ModelForm, AppointmentForm):
    """
        class_object: DoctorAppointment
        Sub_Class:Meta
        Methods: clean_description
    """

    class Meta:
        model = Appointment
        fields = ('patient', 'hospital', 'start_date', 'end_date', 'description')

    start_date = forms.DateTimeField(widget=DateTimeWidget(), initial=str(timezone.now())[:16])
    end_date = forms.DateTimeField(widget=DateTimeWidget(),
                                   initial=str(timezone.now() + timezone.timedelta(hours=1))[:16])
    hospital = forms.ModelChoiceField(queryset=Hospital.objects.all(), required=False, widget=forms.Select(
        attrs={'class': 'selectpicker show-tick form-control', 'required': ''}), empty_label="<Hospital>")
    patient = forms.ModelChoiceField(queryset=Patient.objects.all(), required=False, widget=forms.Select(
        attrs={'class': 'selectpicker show-tick form-control', 'required': ''}),
                                     empty_label="<Patient>")
    description = forms.CharField(max_length=100, required=True, initial="(Description)",
                                  widget=forms.TextInput(attrs={'class': 'form-control'}))

    def __init__(self, doctor=None, *args, **kwargs):
        super(AppointmentForm, self).__init__(*args, **kwargs)
        if doctor:
            self.doctor = doctor
        self.fields.keyOrder = ['patient', 'hospital', 'start_date', 'end_date', 'description']

    def clean_description(self):  # doesn't allow numbers in last name
        data = self.cleaned_data['description']
        if any((character == "<" or character == ">" or character == ";") for character in data):
            raise forms.ValidationError("Only letters please")
        return data


class NurseAppointment(forms.ModelForm, AppointmentForm):
    """
        class_object: NurseAppointment(AppointmentForm)
        Sub_Class:Meta
        Methods: clean_description
    """

    class Meta:
        model = Appointment
        fields = ('patient', 'doctor', 'hospital', 'start_date', 'end_date')

    patient = forms.ModelChoiceField(queryset=Patient.objects.all(), required=False, widget=forms.Select(
        attrs={'class': 'selectpicker show-tick form-control', 'required': ''}),
                                     empty_label="<Patient>")
    doctor = forms.ModelChoiceField(queryset=Doctor.objects.all(), required=False, widget=forms.Select(
        attrs={'class': 'selectpicker show-tick form-control', 'required': ''}),
                                    empty_label="<Doctor>")
    start_date = forms.DateTimeField(widget=DateTimeWidget(), initial=str(timezone.now())[:16])
    end_date = forms.DateTimeField(widget=DateTimeWidget(),
                                   initial=str(timezone.now() + timezone.timedelta(hours=1))[:16])
    description = forms.CharField(max_length=100, required=True, initial="(Description)",
                                  widget=forms.TextInput(attrs={'class': 'form-control'}))

    def __init__(self, *args, **kwargs):
        super(NurseAppointment, self).__init__(*args, **kwargs)
        self.fields.keyOrder = ['patient', 'doctor', 'hospital', 'start_date', 'end_date', 'description']

    def clean_description(self):  # doesn't allow numbers in last name
        data = self.cleaned_data['description']
        if any((character == "<" or character == ">" or character == ";") for character in data):
            raise forms.ValidationError("Only letters please")
        return data


class ViewStatisticsForm(forms.Form):
    """
        class_object: NurseAppointment(AppointmentForm)
    """
    hospital = forms.ModelChoiceField(queryset=Hospital.objects.all(), required=False, widget=forms.Select(
        attrs={'class': 'selectpicker show-tick form-control'}), empty_label="<Hospital>")
    patient = forms.ModelChoiceField(queryset=Patient.objects.all(), required=False, widget=forms.Select(
        attrs={'class': 'selectpicker show-tick form-control'}), empty_label="<Patient>")
    prescription = forms.ModelChoiceField(queryset=Prescription.objects.all(), required=False, widget=forms.Select(
        attrs={'class': 'selectpicker show-tick form-control'}), empty_label="<Prescription>")


class LogSearchForm(forms.Form):
    # will work on this stuff later
    #    patient = forms.ModelChoiceField(queryset=Patient.objects.all(), required=False, widget=forms.Select(
    #        attrs={'class': 'selectpicker show-tick form-control'}), empty_label="<Patient>")
    #    doctor = forms.ModelChoiceField(queryset=Doctor.objects.all(), required=False, widget=forms.Select(
    #        attrs={'class': 'selectpicker show-tick form-control'}), empty_label="<Doctor>")
    #    nurse = forms.ModelChoiceField(queryset=Nurse.objects.all(), required=False, widget=forms.Select(
    #        attrs={'class': 'selectpicker show-tick form-control'}), empty_label="<Nurse>")
    hospital = forms.ModelChoiceField(queryset=Hospital.objects.all(), required=False, widget=forms.Select(
        attrs={'class': 'selectpicker show-tick form-control'}), empty_label="<Hospital>")
    user_email = forms.EmailField(max_length=50, required=False, widget=forms.EmailInput(attrs={'class': 'form-control'}))
    start_time = forms.DateTimeField(widget=DateTimeWidget(), initial='2000-01-01\t00:00:00')
    end_time = forms.DateTimeField(widget=DateTimeWidget(), initial='2099-12-31\t23:59:59')


class AdminCreationForm(forms.Form):
    """
        class_object: AdminCreationForm(forms.Form)
    """
    email = forms.EmailField(max_length=100, required=True, widget=forms.EmailInput(attrs={'class': 'form-control'}))
    password = forms.CharField(max_length=50, required=True, widget=forms.TextInput(attrs={'class': 'form-control'}))


class DoctorCreationForm(forms.ModelForm):
    """
        class_object: DoctorCreationForm(forms.ModelForm)
        Sub_Class:Meta
        Methods: clean_first_name, clean_last_name, clean_email
    """

    class Meta:
        model = Doctor
        fields = ('first_name', 'last_name', 'email', 'password', 'hospitals')

    hospitals = forms.ModelMultipleChoiceField(queryset=Hospital.objects.all(), required=True,
                                               widget=forms.SelectMultiple(attrs={'class': 'form-control'}))
    first_name = forms.CharField(max_length=50, required=True, widget=forms.TextInput(attrs={'class': 'form-control'}))
    last_name = forms.CharField(max_length=50, required=True, widget=forms.TextInput(attrs={'class': 'form-control'}))
    password = forms.CharField(widget=forms.PasswordInput(attrs={'class': 'form-control'}))
    email = forms.EmailField(max_length=50, required=True, widget=forms.TextInput(attrs={'class': 'form-control'}))

    def clean_first_name(self):  # doesn't allow numbers in first name
        data = self.cleaned_data['first_name']
        if any((character == "<" or character == ">" or character == ";") for character in data):
            raise forms.ValidationError("Only letters please")
        return data

    def clean_last_name(self):  # doesn't allow numbers in last name
        data = self.cleaned_data['last_name']
        if any((character == "<" or character == ">" or character == ";") for character in data):
            raise forms.ValidationError("Only letters please")
        return data

    def clean_email(self):  # doesn't allow numbers in last name
        data = self.cleaned_data['email']
        if any((character == "<" or character == ">" or character == ";") for character in data):
            raise forms.ValidationError("Only letters please")
        return data


class NurseCreationForm(forms.ModelForm):
    """
    class_object: NurseCreationForm(forms.ModelForm)
    Sub_Class:Meta
    Methods: clean_last_name
    """

    class Meta:
        model = Nurse
        fields = ('first_name', 'last_name', 'email', 'password', 'working_hospital')

    working_hospital = forms.ModelChoiceField(queryset=Hospital.objects.all(), required=True, widget=forms.Select(
        attrs={'class': 'selectpicker show-tick form-control'}), empty_label="<Working Hospital>")
    first_name = forms.CharField(max_length=50, required=True, widget=forms.TextInput(attrs={'class': 'form-control'}))
    last_name = forms.CharField(max_length=50, required=True, widget=forms.TextInput(attrs={'class': 'form-control'}))
    password = forms.CharField(widget=forms.PasswordInput(attrs={'class': 'form-control'}))
    email = forms.EmailField(max_length=50, required=True, widget=forms.TextInput(attrs={'class': 'form-control'}))

    def clean_first_name(self):  # doesn't allow numbers in first name
        data = self.cleaned_data['first_name']
        if any((character == "<" or character == ">" or character == ";") for character in data):
            raise forms.ValidationError("Only letters please")
        return data

    def clean_last_name(self):  # doesn't allow numbers in last name
        data = self.cleaned_data['last_name']
        if any((character == "<" or character == ">" or character == ";") for character in data):
            raise forms.ValidationError("Only letters please")
        return data


class HospitalCreationForm(forms.ModelForm):
    """
    class_object: HospitalCreationForm(forms.ModelForm)
    Sub_Class:Meta
    Methods: clean_hospital_name
    """

    class Meta:
        model = Hospital
        fields = ('hospital_name',)

    hospital_name = forms.CharField(max_length=50, required=True,
                                    widget=forms.TextInput(attrs={'class': 'form-control'}))

    def clean_hospital_name(self):  # doesn't allow numbers in hospital name
        data = self.cleaned_data['hospital_name']
        if any((character == "<" or character == ">" or character == ";") for character in data):
            raise forms.ValidationError("Only letters please")
        return data


class CreateTestForm(forms.ModelForm):
    """
    class_object: CreateTestForm(forms.ModelForm)
    Sub_Class:Meta
    Methods: clean_description
    """

    class Meta:
        model = Test
        fields = ('patient', 'description', 'is_released', 'results')

    patient = forms.ModelChoiceField(queryset=Patient.objects.all(), required=True, widget=forms.Select(
        attrs={'class': 'selectpicker show-tick form-control'}), empty_label="<Patient>")
    description = forms.CharField(max_length=50, required=True, widget=forms.TextInput(attrs={'class': 'form-control'}))
    is_released = forms.CheckboxInput()
    results = forms.FileField(required=True, widget=forms.FileInput(attrs={'class': 'form-control'}))

    def clean_description(self):  # doesn't allow numbers in last name
        data = self.cleaned_data['description']
        if any((character == "<" or character == ">" or character == ";") for character in data):
            raise forms.ValidationError("Only letters please")
        return data


class ShowTestForm(forms.ModelForm):
    """
    class_object: ShowTestForm(forms.ModelForm)
    Sub_Class:Meta
    Methods: clean_hospital_name
    """

    class Meta:
        model = Hospital
        fields = ('hospital_name',)

    hospital_name = forms.CharField(max_length=50, required=True,
                                    widget=forms.TextInput(attrs={'class': 'form-control'}))

    def clean_hospital_name(self):  # doesn't allow numbers in last name
        data = self.cleaned_data['hospital_name']
        if any((character == "<" or character == ">" or character == ";") for character in data):
            raise forms.ValidationError("Only letters please")
        return data


class MessageForm(forms.Form):
    """
    class_object: MessageForm(forms.Form)
    Sub_Class:Meta
    Methods: clean_subject, clean_body
    """
    recipient = forms.EmailField(
        widget=forms.TextInput(attrs={'class': 'form-control', 'placeholder': "Recipient username"}))
    subject = forms.CharField(max_length=100,
                              widget=forms.TextInput(
                                  attrs={'class': 'form-control', 'placeholder': "Subject of message"}))
    body = forms.CharField(max_length=20000,
                           widget=forms.Textarea(attrs={'class': 'form-control', 'placeholder': "Message goes here"}))

    def clean_subject(self):  # doesn't allow numbers in last name
        data = self.cleaned_data['subject']
        if any((not character.isalpha() and not character == " ") for character in data):
            raise forms.ValidationError("Only letters please")
        return data

    def clean_body(self):  # doesn't allow numbers in last name
        data = self.cleaned_data['body']
        if any((character == "<" or character == ">" or character == ";") for character in data):
            raise forms.ValidationError("Only letters please")
        return data


class UpdateMedForm(forms.ModelForm):
    """
    class_object: UpdateMedForm(forms.ModelForm)
    Sub_Class:Meta
    """

    class Meta:
        model = Patient
        fields = ('medical_information',)

    medical_information = forms.FileField(required=True, widget=forms.FileInput(attrs={'class': 'form-control'}))


class PrescriptionForm(forms.ModelForm):
    """
    class_object: PrescriptionForm(forms.ModelForm)
    Sub_Class:Meta
    """

    class Meta:
        model = Prescription
        fields = ('prescription_name',)

    prescription_name = forms.CharField(max_length=150, required=True,
                                        widget=forms.TextInput(attrs={'class': 'form-control'}))


class AddPatientPrescriptionForm(forms.Form):
    """
    class_object: AddPatientPrescriptionForm(forms.Form)
    Sub_Class:Meta
    """
    prescription = forms.ModelChoiceField(queryset=Prescription.objects.all(), required=True, widget=forms.Select(
        attrs={'class': 'selectpicker show-tick form-control', 'required': ''}), empty_label="<Prescription>")
    patient = forms.ModelChoiceField(queryset=Patient.objects.all(), required=True, widget=forms.Select(
        attrs={'class': 'selectpicker show-tick form-control', 'required': ''}), empty_label="<Patient>")


class DoctorAdmitPatientForm(forms.Form):
    """
    class_object: DoctorAdmitPatientForm(forms.Form)
    Sub_Class:Meta
    Methods: clean_reason
    """
    patient = forms.ModelChoiceField(queryset=Patient.objects.all(), required=True, widget=forms.Select(
        attrs={'class': 'selectpicker show-tick form-control'}), empty_label="<Patient>")
    hospital = forms.ModelChoiceField(queryset=Hospital.objects.all(), required=True, widget=forms.Select(
        attrs={'class': 'selectpicker show-tick form-control'}), empty_label="<Hospital>")
    reason = forms.CharField(max_length=20000, widget=forms.Textarea(
        attrs={'class': 'form-control', 'placeholder': 'Reason for admission'}))

    def clean_reason(self):  # doesn't allow numbers in last name
        data = self.cleaned_data['reason']
        if any((character == "<" or character == ">" or character == ";") for character in data):
            raise forms.ValidationError("Only letters please")
        return data


class DoctorTransferPatientForm(forms.Form):
    hospital = forms.ModelChoiceField(queryset=Hospital.objects.all(), required=True, widget=forms.Select(
        attrs={'class': 'selectpicker show-tick form-control'}), empty_label="<New Hospital>")
    reason = forms.CharField(max_length=20000, widget=forms.Textarea(
        attrs={'class': 'form-control', 'placeholder': 'Reason for admission'}))

    def clean_reason(self):  # doesn't allow numbers in last name
        data = self.cleaned_data['reason']
        if any((character == "<" or character == ">" or character == ";") for character in data):
            raise forms.ValidationError("Only letters please")
        return data


class NurseAdmitPatientForm(forms.Form):
    """
    class_object: NurseAdmitPatientForm(forms.Form)
    Sub_Class:Meta
    Methods: clean_reason
    """
    patient = forms.ModelChoiceField(queryset=Patient.objects.all(), required=True, widget=forms.Select(
        attrs={'class': 'selectpicker show-tick form-control', 'required': ''}), empty_label="<Patient>")
    reason = forms.CharField(max_length=20000, widget=forms.Textarea(
        attrs={'class': 'form-control', 'placeholder': 'Reason for admission'}))

    def clean_reason(self):  # doesn't allow numbers in last name
        data = self.cleaned_data['reason']
        if any((character == "<" or character == ">" or character == ";") for character in data):
            raise forms.ValidationError("Only letters please")
        return data
