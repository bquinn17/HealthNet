from django.contrib import auth
from django.contrib.admin.models import LogEntry, ADDITION, DELETION
from django.contrib.auth.decorators import *
from django.contrib.contenttypes.models import ContentType
from django.http import HttpResponse
from django.shortcuts import render, render_to_response
from django.template import loader
from django.template.context_processors import csrf
from django.shortcuts import *

from .forms import *
from .models import *


def home_page(request):
    return render(request, 'health/index.html')


def patient_registration(request):
    if request.method == "POST":
        form = PatientRegistrationForm(request.POST)
        if form.is_valid():
            patient = form.save(commit=False)
            if Patient.objects.filter(email=patient.email).exists():
                return render(request, 'health/invalid_email.html')
            else:
                patient.username = patient.email
                patient.set_password(patient.password)
                patient.save()
                return render(request, 'health/registration_success.html')
        else:
            return render(request, 'health/invalid_login.html')
    else:
        form = PatientRegistrationForm()
        return render(request, 'health/register.html', {'form': form})


def update_object_history(request, obj, position, action, message=None):
    """ Update object history if turned on """
    # if not position_settings.UPDATE_OBJECT_HISTORY:
    #     return

    if not message:
        if action == ADDITION:
            action_message = 'added'
        elif action == DELETION:
            action_message = 'removed'
        else:
            action_message = 'changed'
        message = 'Position %s was %s. ' % (position, action_message)

    from django.utils.encoding import force_unicode
    LogEntry.objects.log_action(
        user_id=request.user.pk,
        content_type_id=ContentType.objects.get_for_model(obj).pk,
        object_id=obj.pk,
        object_repr=force_unicode(obj),
        action_flag=action,
        change_message=message
    )


def login(request):
    if request.user.is_authenticated():
        return calendar(request)
    dictionary = {}
    dictionary.update(csrf(request))
    return render_to_response("health/login.html", dictionary)


def auth_view(request):
    username = request.POST.get('username', '')  # if no value found in dictionary, return empty string
    password = request.POST.get('password', '')
    user = auth.authenticate(username=username, password=password)

    if user is not None:
        auth.login(request, user)
        return loggedin(request)  # HttpResponseRedirect('/accounts/loggedin/')
    else:
        return invalid_login(request)  # HttpResponseRedirect('/accounts/invalid/')


def loggedin(request):
    # person = get_object_or_404(Patient, pk=patient_id)
    return render_to_response('health/loggedin.html',
                              {'full_name': request.user.first_name + " " + request.user.last_name})


def invalid_login(request):
    return render_to_response('health/invalid_login.html')


def logout(request):
    auth.logout(request)
    return render_to_response('health/logout.html')


def create_appointment(request):
    if request.method == "POST":
        form = AppointmentForm(request.POST)
        if form.is_valid():
            appointment = form.save()
            appointment.save()
            return HttpResponse("Congratulations! Created an appointment.")
        else:
            return HttpResponse(form.errors + "The appointment is invalid")
    else:
        form = AppointmentForm()
        return render(request, 'health/create_appointment.html', {'form': form})


@login_required
def calendar(request):
    template = loader.get_template('health/calendar.html')
    appointment_list = []
    is_nurse = False

    if isinstance(request.user, Nurse):
        is_nurse = True
        for a in Appointment.objects.all():
            if a.hospital == Nurse.working_hospital:
                appointment_list.append(a)
    elif isinstance(request.user, Patient) or isinstance(request.user, Doctor):
        appointment_list = request.user.appointments

    context = {
        'isLoggedIn': request.user.is_authenticated,
        'isNurse': is_nurse,
        'appointment_list': appointment_list,
    }

    return HttpResponse(template.render(context, request))


def error_page(request):
    return render_to_response('health/notFound.html')


def update_patient_profile(request):  # template_name='health/update_patient_profile.html'):
    if request.method == "POST":
        form = PatientUpdateForm(data= request.POST, instance= request.user)
        if form.is_valid():
            patient = form.save(commit=False)
            patient.save()
            return render(request,'health/profile_updated.html')
    else:
        form = PatientUpdateForm(instance=request.user)
    return render(request, 'health/profile_update.html', {'form': form})
