from django.test import TestCase, Client
from .models import *
from .views import *
from .forms import *
from django.core.files import File
import os

good_registration_form_data = {'email': "who@where.com", 'first_name': "Billy", 'last_name': "Bob",
                               'password': "password",
                               'medical_information': '', 'phone_number': '1111111111', 'insurance_provider': "No one",
                               'insurance_id': '2222222222', 'address': "Nowhere",
                               'emergency_contact_phone_number': '3333333333',
                               'emergency_contact_name': 'No body', "main_hospital": 0}


# TEST USERS
class TestRegistrant:
    @staticmethod
    def is_authenticated():
        return 0

    @staticmethod
    def get(string):
        if string == 'email':
            return "who@where.com"
        else:
            return 0

    is_staff = 0


class TestNurse:
    @staticmethod
    def is_authenticated():
        return 1

    username = "nurse@nurse.test"

    @staticmethod
    class groups:
        name = "Nurse"
        @staticmethod
        def all():
            return [TestNurse.groups, ]


class TestDoctor:
    @staticmethod
    def is_authenticated():
        return 1

    username = "doctor@doctor.test"

    last_name = "Doctor"
    id = 1
    @staticmethod
    class groups:
        name = "Doctor"
        @staticmethod
        def all():
            return [TestDoctor.groups,]


class TestAdmin:
    @staticmethod
    def is_authenticated():
        return 1

    id = -1
    is_staff = True
    username = "admin@admin.test"
    class groups:
        name = "Admin"
        @staticmethod
        def all():
            return [TestAdmin.groups, ]

# UNIT TESTS
class ActivityLogTest(TestCase):
    def setUp(self):
        Hospital.objects.create(hospital_name="Hospital 1", id=0)  # sets up fake hospitals
        Hospital.objects.create(hospital_name="Hospital 2", id=1)
        Nurse.objects.create(first_name="Nurse", last_name="Nurse", username="nurse@nurse.test", working_hospital_id=0)
        doctor = Doctor.objects.create(first_name="Doctor", last_name="Doctor", username="doctor@doctor.test")
        doctor.hospitals = [Hospital.objects.get(id=0), Hospital.objects.get(id=1)]
        User.objects.create(username='admin@admin.test', is_staff=1)
        if os.path.exists('logs/patients/who@where.com_activity_log.txt'):
            os.remove('logs/patients/who@where.com_activity_log.txt')
        if os.path.exists('logs/hospitals/Hospital_1_activity_log.txt'):
            os.remove('logs/hospitals/Hospital_1_activity_log.txt')
        if os.path.exists('logs/doctors/doctor@doctor.test_activity_log.txt'):
            os.remove('logs/doctors/doctor@doctor.test_activity_log.txt')
        if os.path.exists('logs/admins/admin@admin.test_activity_log.txt'):
            os.remove('logs/admins/admin@admin.test_activity_log.txt')
        if os.path.exists('logs/nurses/nurse@nurse.test_activity_log.txt'):
            os.remove('logs/nurses/nurse@nurse.test_activity_log.txt')
        if os.path.exists('logs/hospitals/Hospital_2_activity_log.txt'):
            os.remove('logs/hospitals/Hospital_2_activity_log.txt')

    def test_patient_registration_logging(self):
        request = Client()
        request.user = TestRegistrant()
        request.POST = TestRegistrant()
        log_activity(action="Patient Registered", request=request)
        file = open('logs/patients/who@where.com_activity_log.txt', 'r')
        file2 = open('logs/hospitals/Hospital_1_activity_log.txt', 'r')
        self.assertTrue(str(file.read())[101:127] == 'Action: Patient Registered',
                        "Registration logging not working. Action was " + str(file.read())[101:127])
        self.assertTrue(str(file2.read())[101:127] == 'Action: Patient Registered',
                        "Registration logging not working for hospital. Action was " + str(file.read())[101:127])
        file.close()
        file2.close()
        os.remove('logs/patients/who@where.com_activity_log.txt')
        os.remove('logs/hospitals/Hospital_1_activity_log.txt')

    def test_nurse_logging(self):
        request = Client()
        request.user = TestNurse
        log_activity(action='Testing...', request=request)
        file = open('logs/nurses/nurse@nurse.test_activity_log.txt', 'r')
        file2 = open('logs/hospitals/Hospital_1_activity_log.txt', 'r')
        self.assertTrue(str(file.read())[101:119] == 'Action: Testing...',
                        "Nurse logging not working. Action was: " + file.read()[101:120])
        self.assertTrue(str(file2.read())[101:119] == 'Action: Testing...',
                        "Nurse logging in hospital not working. Action was: " + file2.read()[101:120])
        file.close()
        file2.close()
        os.remove('logs/nurses/nurse@nurse.test_activity_log.txt')
        os.remove('logs/hospitals/Hospital_1_activity_log.txt')

    def test_doctor_logging(self):
        request = Client()
        request.user = TestDoctor
        log_activity(action='Testing...', request=request)
        file = open('logs/doctors/doctor@doctor.test_activity_log.txt', 'r')
        file2 = open('logs/hospitals/Hospital_1_activity_log.txt', 'r')
        file3 = open('logs/hospitals/Hospital_1_activity_log.txt', 'r')
        self.assertTrue(str(file.read())[101:119] == 'Action: Testing...',
                        "Doctor logging not working. Action was: " + file.read()[101:120])
        self.assertTrue(str(file2.read())[101:119] == 'Action: Testing...',
                        "Doctor logging in hospital not working. Action was: " + file2.read()[101:120])
        self.assertTrue(str(file3.read())[101:119] == 'Action: Testing...',
                        "Doctor logging in hospital not working. Action was: " + file2.read()[101:120])
        file.close()
        file2.close()
        file3.close()
        os.remove('logs/doctors/doctor@doctor.test_activity_log.txt')
        os.remove('logs/hospitals/Hospital_1_activity_log.txt')
        os.remove('logs/hospitals/Hospital_2_activity_log.txt')

    def test_admin_logging(self):
        request = Client()
        request.user = TestAdmin
        log_activity(action='Testing...', request=request)
        file = open('logs/admins/admin@admin.test_activity_log.txt', 'r')
        self.assertTrue(str(file.read())[101:119] == 'Action: Testing...',
                        "Admin logging not working. Action was: " + file.read()[101:119])
        file.close()
        os.remove('logs/admins/admin@admin.test_activity_log.txt')


class RegistrationTest(TestCase):
    # good registration form data for use in some tests
    good_form_data = good_registration_form_data

    def setUp(self):
        Hospital.objects.create(hospital_name="Hospital 1", id=0)  # sets up a fake hospital

    def test_patient_registration_form_create(self):
        form = PatientRegistrationForm(data=self.good_form_data)
        self.assertTrue(form.is_valid(), form.errors)

    def test_patient_registration_form_email(self):
        bad_email_form_data = {  # test if form rejects invalid email
            'email': "whowhere.com", 'first_name': "Billy", 'last_name': "Bob", 'password': "password",
            'medical_information': '', 'phone_number': '1111111111', 'insurance_provider': "No one",
            'insurance_id': '2222222222', 'address': "Nowhere", 'emergency_contact_phone_number': '3333333333',
            'emergency_contact_name': 'No body', "main_hospital": 0}
        form = PatientRegistrationForm(data=bad_email_form_data)
        self.assertFalse(form.is_valid(), "invalid email accepted")

    def test_patient_registration_form_long_phone_number(self):
        long_phone_number_form_data = {  # test if form rejects phone number too long
            'email': "who@where.com", 'first_name': "Billy", 'last_name': "Bob", 'password': "password",
            'medical_information': '', 'phone_number': '1111111111111', 'insurance_provider': "No one",
            'insurance_id': '2222222222', 'address': "Nowhere", 'emergency_contact_phone_number': '3333333333',
            'emergency_contact_name': 'No body', "main_hospital": 0}
        form = PatientRegistrationForm(data=long_phone_number_form_data)
        self.assertFalse(form.is_valid(), "took phone number that was too long")

    def test_patient_registration_form_create_valid_names(self):
        bad_names_form_data = {  # test if form rejects numbers in first, last names
            'email': "who@where.com", 'first_name': "Bi<>;lly", 'last_name': "Bo<><><>>>><>;b", 'password': "password",
            'medical_information': '', 'phone_number': '1111111111', 'insurance_provider': "No one",
            'insurance_id': '2222222222', 'address': "Nowhere", 'emergency_contact_phone_number': '3333333333',
            'emergency_contact_name': 'No body', "main_hospital": 0}
        form = PatientRegistrationForm(data=bad_names_form_data)
        self.assertFalse(form.is_valid(), "accepted odd characters in patient name")

    def test_patient_registration_form_valid_phone_number(self):
        bad_phone_number_form_data = {  # test if form rejects letters in phone numbers
            'email': "who@where.com", 'first_name': "Billy", 'last_name': "Bob", 'password': "password",
            'medical_information': '', 'phone_number': '11111av111', 'insurance_provider': "No one",
            'insurance_id': '2222222222', 'address': "Nowhere", 'emergency_contact_phone_number': '33333pa333',
            'emergency_contact_name': 'No body', "main_hospital": 0}
        form = PatientRegistrationForm(data=bad_phone_number_form_data)
        self.assertFalse(form.is_valid(), "accepted letters in phone numbers")

    def test_patient_registration_success(self):
        request = Client()
        request.method = 'POST'
        request.POST = self.good_form_data
        request.FILES = None
        request.META = {}
        request.user = TestRegistrant()
        patient_registration(request=request)
        os.remove('logs/patients/who@where.com_activity_log.txt')  # removes filthy activity log byproducts
        os.remove('logs/hospitals/Hospital_1_activity_log.txt')
        self.assertTrue(Patient.objects.filter(username="who@where.com").exists())

    def test_patient_registration_email_used(self):
        request = Client()
        request.method = 'POST'
        request.POST = self.good_form_data
        request.FILES = None
        request.user = TestRegistrant()
        request.META = {}
        patient_registration(request=request)  # creates 2 users with email/username who@where.com in test database
        patient_registration(request=request)
        os.remove('logs/patients/who@where.com_activity_log.txt')  # removes filthy activity log byproducts
        os.remove('logs/hospitals/Hospital_1_activity_log.txt')
        self.assertFalse(Patient.objects.filter(id=2).exists())  # if a second user exists in the test database,
        # the test fails


class DoctorRegistrationTest(TestCase):
    # good registration form data for use in some tests
    Doctor_registration_data = {'first_name': 'Doctor', 'last_name': 'Doctor', 'email': 'DoctorDoctor@gmail.com',
                                'password': 'Konichiwa1', 'hospitals': [89, 45, 90]}

    def setUp(self):
        Hospital.objects.create(hospital_name="Hospital 1", id=89)  # sets up a fake hospital
        Hospital.objects.create(hospital_name="Hospital 2", id=45)
        Hospital.objects.create(hospital_name="Hospital 3", id=90)

    def test_DoctorCreationsForm_create(self):
        form = DoctorCreationForm(data=self.Doctor_registration_data)
        self.assertTrue(form.is_valid(), form.errors)

    def test_doctor_first_name(self):
        Doctor_registration_data_invalid_firstname = {'first_name': '<Doctor>', 'last_name': 'Doctor',
                                                      'email': 'DoctorDoctor@gmail.com',
                                                      'password': 'Konichiwa1', 'hospitals': [89, 45, 90]}
        form = DoctorCreationForm(data=Doctor_registration_data_invalid_firstname)
        self.assertFalse(form.is_valid(), "invalid first name entered")

    def test_doctor_last_name(self):
        Doctor_registration_data_invalid_lastname = {'first_name': 'Doctor', 'last_name': '<Doctor>',
                                                     'email': 'DoctorDoctor@gmail.com',
                                                     'password': 'Konichiwa1', 'hospitals': [89, 45, 90]}
        form = DoctorCreationForm(data=Doctor_registration_data_invalid_lastname)
        self.assertFalse(form.is_valid(), "invalid last name entered")

    def test_doctor_email(self):
        Doctor_registration_data_invalid_email = {'first_name': '<Doctor>', 'last_name': 'Doctor',
                                                  'email': 'DoctorDoctorgmail.com',
                                                  'password': 'Konichiwa1', 'hospitals': [89, 45, 90]}
        form = DoctorCreationForm(data=Doctor_registration_data_invalid_email)
        self.assertFalse(form.is_valid(), "invalid email entered")

    def test_doctor_registration_success(self):
        request = Client()
        request.method = 'POST'
        request.POST = self.Doctor_registration_data
        request.FILES = None
        request.user = TestAdmin()
        doctor_creation(request=request)
        os.remove('logs/admins/admin@admin.test_activity_log.txt')  # removes filthy activity log byproduct
        self.assertTrue(Doctor.objects.filter(username="DoctorDoctor@gmail.com").exists())

    def test_doctor_registration_email_used(self):
        request = Client()
        request.method = 'POST'
        request.POST = self.Doctor_registration_data
        request.FILES = None
        request.user = TestAdmin()
        doctor_creation(request=request)  # creates 2 users with email/username who@where.com in test database
        doctor_creation(request=request)
        os.remove('logs/admins/admin@admin.test_activity_log.txt')  # removes filthy activity log byproduct
        self.assertFalse(Doctor.objects.filter(id=2).exists())  # if a second user exists in the test database,
        # the test fails


class NurseRegistrationTest(TestCase):
    # good registration form data for use in some tests
    Nurse_registration_data = {'first_name': 'Nurse', 'last_name': 'Joy',
                               'password': 'Konichiwa1', 'working_hospital': 89, 'email': 'NurseJoy@gmail.com'}

    def setUp(self):
        Hospital.objects.create(hospital_name="Hospital 1", id=89)  # sets up a fake hospital

    def test_NurseCreation_form_create(self):
        form = NurseCreationForm(data=self.Nurse_registration_data)
        self.assertTrue(form.is_valid(), form.errors)

    def test_nurse_first_name(self):
        Nurse_registration_data_invalid_firstname = {'first_name': '<Nurse>', 'last_name': 'Joy',
                                                     'password': 'Konichiwa1', 'working_hospital': 89,
                                                     'email': 'NurseJoy@gmail.com'}

        form = NurseCreationForm(data=Nurse_registration_data_invalid_firstname)
        self.assertFalse(form.is_valid(), "invalid first name entered")

    def test_nurse_last_name(self):
        Nurse_registration_data_invalid_lastname = {'first_name': 'Nurse', 'last_name': 'Joy>>><<<<',
                                                    'password': 'Konichiwa1', 'working_hospital': 89,
                                                    'email': 'NurseJoy@gmail.com'}

        form = NurseCreationForm(data=Nurse_registration_data_invalid_lastname)
        self.assertFalse(form.is_valid(), "invalid last name entered")

    def test_nurse_email(self):
        Nurse_registration_data_invalid_email = {'first_name': 'Nurse', 'last_name': 'Joy',
                                                 'password': 'Konichiwa1', 'working_hospital': 89,
                                                 'email': 'NurseJoygmail.com'}
        form = NurseCreationForm(data=Nurse_registration_data_invalid_email)
        self.assertFalse(form.is_valid(), "invalid email entered")

    def test_Nurse_registration_success(self):
        request = Client()
        request.method = 'POST'
        request.POST = self.Nurse_registration_data
        request.FILES = None
        request.user = TestAdmin()
        nurse_creation(request=request)
        os.remove('logs/admins/admin@admin.test_activity_log.txt')  # removes filthy activity log byproduct
        self.assertTrue(Nurse.objects.filter(username="NurseJoy@gmail.com").exists())

    def test_nurse_registration_email_used(self):
        request = Client()
        request.method = 'POST'
        request.POST = self.Nurse_registration_data
        request.FILES = None
        request.user = TestAdmin()
        nurse_creation(request=request)  # creates 2 users with email/username who@where.com in test database
        nurse_creation(request=request)
        os.remove('logs/admins/admin@admin.test_activity_log.txt')  # removes filthy activity log byproduct
        self.assertFalse(Nurse.objects.filter(id=2).exists())  # if a second user exists in the test database,
        # the test fails


class AdminCreation_test(TestCase):
    # good registration form data for use in some tests
    Admin_Creation_data = {'email':'admin@gmail.com','password':'admin123'}


    def test_AdminCreationForm_create(self):
        form = AdminCreationForm(data=self.Admin_Creation_data)
        self.assertTrue(form.is_valid(), form.errors)


    def test_Admin_Creation_success(self):
        request = Client()
        request.method = 'POST'
        request.POST = self.Admin_Creation_data
        request.FILES = None
        request.user = TestAdmin()
        admin_genesis(request=request)
        os.remove('logs/admins/admin@admin.test_activity_log.txt')  # removes filthy activity log byproduct
        self.assertTrue(User.objects.filter(username="admin@gmail.com").exists())

    def test_Admin_Creation_email_used(self):
        request = Client()
        request.method = 'POST'
        request.POST = self.Admin_Creation_data
        request.FILES = None
        request.user = TestAdmin()
        admin_genesis(request=request)  # creates 2 users with email/username who@where.com in test database
        admin_genesis(request=request)
        #os.remove('logs/admins/admin@admin.test_activity_log.txt')  # removes filthy activity log byproduct
        self.assertFalse(User.objects.filter(id=2).exists())  # if a second user exists in the test database,
        # the test fails


class PrescriptionCreation_test(TestCase):
    # good registration form data for use in some tests
    prescription_Creation_data = {'prescription_name':'flapadoop',}



    def test_prescriptionForm_create(self):
        form = PrescriptionForm(data=self.prescription_Creation_data)
        self.assertTrue(form.is_valid(), form.errors)


    def test_PrescriptionCreation_success(self):
        request = Client()
        request.method = 'POST'
        request.POST = self.prescription_Creation_data
        request.FILES = None
        request.user = TestAdmin()
        make_new_prescription(request=request)
        #os.remove('logs/admins/admin@admin.test_activity_log.txt')  # removes filthy activity log byproduct
        self.assertTrue(Prescription.objects.filter(prescription_name="flapadoop").exists())


class HospitalCreationTest(TestCase):
    # good hospital form data for use in some tests
    Hospital_Creation_data = {'hospital_name': 'generalhospital',}



    def test_hospitalForm_create(self):
        form = HospitalCreationForm(data=self.Hospital_Creation_data)
        self.assertTrue(form.is_valid(), form.errors)


    def test_HospitalCreation_success(self):
        request = Client()
        request.method = 'POST'
        request.POST = self.Hospital_Creation_data
        request.FILES = None
        request.user = TestAdmin()
        hospital_creation(request=request)
        os.remove('logs/admins/admin@admin.test_activity_log.txt')  # removes filthy activity log byproduct
        self.assertTrue(Hospital.objects.filter(hospital_name="generalhospital").exists())


class TestTest(TestCase):
    Test_data = {'patient': 2, 'is_released': True, 'description': "TESTING..."} # 'results': "logs\hospitals\Rochester_Area_Hospital_activity_log.txt"}

    def setUp(self):
        Hospital.objects.create(hospital_name="Hospital 1", id=0)
        doctor = Doctor.objects.create(first_name="Doctor", last_name="Doctor", username="doctor@doctor.test", id=1)
        doctor.hospitals = [Hospital.objects.get(id=0), ]
        Patient.objects.create(first_name="Patient", last_name="Patient", username="patient@patient.test", id=2)

    def test_valid_test_creation(self):
        request = Client()
        request.method = 'POST'
        request.POST = self.Test_data
        request.FILES = {'results': File(open("logs\hospitals\Rochester_Area_Hospital_activity_log.txt"))}
        request.user = TestDoctor()
        create_test(request=request)
        self.assertTrue(Test.objects.filter(id=1).exists(), "Test was not created")
        test = get_object_or_404(Test, id=1)
        self.assertTrue(test.description == "TESTING...", "Description not set correctly")
        self.assertTrue(test.is_released == True, "Test was created un-released")

    def test_test_creation_wrong_user(self):
        request = Client()
        request.method = 'POST'
        request.POST = self.Test_data
        request.FILES = {'results': File(open("logs\hospitals\Rochester_Area_Hospital_activity_log.txt"))}
        request.user = TestAdmin()
        create_test(request=request)
        self.assertFalse(Test.objects.filter(id=1).exists(), "Test was created as admin")

        request.user = TestNurse()
        create_test(request=request)
        self.assertFalse(Test.objects.filter(id=1).exists(), "Test was created as nurse")

