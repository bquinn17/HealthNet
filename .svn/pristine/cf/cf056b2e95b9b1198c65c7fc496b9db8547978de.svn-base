from django import forms

from .models import *
from django.utils import timezone
import datetime




class PatientRegistrationForm(forms.ModelForm):
    class Meta:
        model = Patient
        fields = (
            'email', 'first_name', 'last_name', 'password', 'medical_information', 'phone_number', 'insurance_provider',
            'insurance_id', 'address', 'emergency_contact_phone_number', 'emergency_contact_name')

    email = forms.CharField(max_length=100, required=True, widget=forms.TextInput(attrs={'class': 'form-control'}))
    first_name = forms.CharField(max_length=100, required=True,
                                 widget=forms.TextInput(attrs={'class': 'form-control'}))
    last_name = forms.CharField(max_length=100, required=True,
                                widget=forms.TextInput(attrs={'class': 'form-control'}))
    address = forms.CharField(max_length=100, required=False,
                              widget=forms.TextInput(attrs={'class': 'form-control'}))
    phone_number = forms.CharField(max_length=10, required=False,
                                   widget=forms.TextInput(attrs={'class': 'form-control'}))
    insurance_id = forms.CharField(max_length=10, required=True,
                                   widget=forms.TextInput(attrs={'class': 'form-control'}))
    insurance_provider = forms.CharField(max_length=30, required=True,
                                         widget=forms.TextInput(attrs={'class': 'form-control'}))
    emergency_contact_name = forms.CharField(max_length=50, required=False,
                                             widget=forms.TextInput(attrs={'class': 'form-control'}))
    emergency_contact_phone_number = forms.CharField(max_length=10, required=False,
                                                     widget=forms.TextInput(attrs={'class': 'form-control'}))
    password = forms.CharField(widget=forms.PasswordInput(attrs={'class': 'form-control'}))

    def clean_phone_number(self):
        data = self.cleaned_data['phone_number']
        if len(data) >= 16:
            raise forms.ValidationError("Please enter a phone number of length less than 16")

        # Always return the cleaned data, whether you have changed it or
        # not.
        return data

    def clean_password(self):
        data = self.cleaned_data['password']
        if len(data) < 7:
            raise forms.ValidationError("Your password is too short")
        # Always return the cleaned data, whether you have changed it or
        # not.
        return data


class PatientUpdateForm(forms.ModelForm):

    email = forms.CharField(max_length=100, required=True, widget=forms.TextInput(attrs={'class': 'form-control'}))
    first_name = forms.CharField(max_length=100, required=True,
                                 widget=forms.TextInput(attrs={'class': 'form-control'}))
    last_name = forms.CharField(max_length=100, required=True,
                                widget=forms.TextInput(attrs={'class': 'form-control'}))
    address = forms.CharField(max_length=100, required=False,
                              widget=forms.TextInput(attrs={'class': 'form-control'}))
    phone_number = forms.CharField(max_length=10, required=False,
                                   widget=forms.TextInput(attrs={'class': 'form-control'}))
    emergency_contact_name = forms.CharField(max_length=50, required=False,
                                             widget=forms.TextInput(attrs={'class': 'form-control'}))
    emergency_contact_phone_number = forms.CharField(max_length=10, required=False,
                                                     widget=forms.TextInput(attrs={'class': 'form-control'}))

    class Meta:
        model = Patient
        fields = ('email', 'first_name', 'last_name', 'medical_information', 'phone_number', "emergency_contact_name",
                  'emergency_contact_phone_number','address')




class AppointmentForm(forms.Form):
    patient = forms.ModelChoiceField(queryset=Patient.objects.all(), required=False, widget=forms.Select(
        attrs={'class': 'selectpicker show-tick form-control', 'required': ''}), empty_label="<Patient>")
    doctor = forms.ModelChoiceField(queryset=Doctor.objects.all(), required=False, widget=forms.Select(
        attrs={'class': 'selectpicker show-tick form-control', 'required': ''}), empty_label="<Doctor>")
    hospital = forms.ModelChoiceField(queryset=Hospital.objects.all(), required=True, widget=forms.Select(
        attrs={'class': 'selectpicker show-tick form-control', 'required': ''}), empty_label="<Hospital>")
    day = forms.DateField(widget=forms.TextInput(attrs={'type': 'date', 'class': 'form-control'}))
    time = forms.DateField(widget=forms.TextInput(attrs={'type': 'time', 'class': 'form-control'}))

    def __init__(self, *args, **kwargs):
        self.user = kwargs.pop('user', None)
        user_profile = self.user
        patient = kwargs.pop('patient', None)
        super(AppointmentForm, self).__init__(*args, **kwargs)
        if patient is not None:
            self.initial['patient'] = User.objects.filter(username=patient)[0]
        if type(patient) is Patient:
            if self.user is not None and user_profile.hospital is not None:
                self.initial['hospital'] = user_profile.hospital.id
            if self.user is not None and user_profile.doctor is not None:
                self.initial['doctor'] = user_profile.doctor.id

    class Meta:
        model = Appointment

    def clean(self):  # Cleans data and checks appointment for specified conflicts
        act_date=datetime.datetime.combine(self.cleaned_data['day'], self.cleaned_data['time'])
        cleaned_data = super(AppointmentForm, self).clean()
        user_profile = self.user
        if self.cleaned_data.get('hospital') is not None:
            hospital = self.cleaned_data.get('hospital')
            if self.user is "Doctor":
                doctor = user_profile
            else:
                doctor = self.cleaned_data.get('doctor')
            if self.user is "Patient":
                patient = user_profile
            else:
                patient = self.cleaned_data.get('patient')
            locations = Hospital.objects.filter(doctor=doctor, pk=hospital.id)
            # invalid location
            if locations.count() == 0:
                raise forms.ValidationError("That Doctor is not available at that location")
            # time conflict
            if doctor is not None and patient is not None and self.cleaned_data.get('date') is not None:
                act_date = timezone.make_aware(
                    datetime.datetime.strptime(self.cleaned_data.get('date'), "%m/%d/%Y %I:%M %p"),
                    timezone.get_default_timezone())
                for appt in Appointment.objects.filter(doctor=doctor):
                    if appt.date == act_date:
                        raise forms.ValidationError("There is already an appointment at this time for that doctor")
                for appt in Appointment.objects.filter(patient=patient):
                    if appt.date == act_date:
                        raise forms.ValidationError("There is already an appointment at this time for that patient")
            else:
                if self.user is "Doctor":
                    raise forms.ValidationError({'patient': ["This field is required"]})
                if self.user is "Patient":
                    raise forms.ValidationError({'doctor': ["This field is required"]})

            self.cleaned_data['date'] = datetime.datetime.combine(self.cleaned_data['day'], self.cleaned_data['time'])
        return cleaned_data

    # Save the appointment to the database
    def save(self):
        hospital = self.cleaned_data['hospital']
        date = self.cleaned_data['date']
        if self.user is "Doctor":
            doctor = self.user
        else:
            doctor = self.cleaned_data['doctor']
        if self.user is "Patient":
            patient = self.user
        else:
            patient = self.cleaned_data['patient']
        act_date = timezone.make_aware(datetime.datetime.strptime(date, "%m/%d/%Y %I:%M %p"),
                                       timezone.get_default_timezone())
        appt = Appointment.objects.create_appt(patient, doctor, act_date, hospital)
        return appt
