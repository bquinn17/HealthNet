"""
Authors: Nahjee Sowah, Andrew Fountain, Chris Cassidy, Chris Cifolelli, Bryan Quinn
"""
from django import forms
from django.utils import timezone
from .models import *
import datetime


class PatientRegistrationForm(forms.ModelForm):
    """
    class_object: PatientRegistrationForm(forms.ModelForm)
    Sub_Class:Meta
    Methods: clean_phone_number, clean_password

    """

    class Meta:
        model = Patient
        fields = (
            'email', 'first_name', 'last_name', 'password', 'medical_information', 'phone_number', 'insurance_provider',
            'insurance_id', 'address', 'emergency_contact_phone_number', 'emergency_contact_name', "main_hospital")

    email = forms.CharField(max_length=50, required=True, widget=forms.TextInput(attrs={'class': 'form-control'}))
    first_name = forms.CharField(max_length=25, required=True,
                                 widget=forms.TextInput(attrs={'class': 'form-control'}))
    last_name = forms.CharField(max_length=25, required=True,
                                widget=forms.TextInput(attrs={'class': 'form-control'}))
    address = forms.CharField(max_length=100, required=False,
                              widget=forms.TextInput(attrs={'class': 'form-control'}))
    phone_number = forms.CharField(max_length=10, required=False,
                                   widget=forms.TextInput(attrs={'class': 'form-control'}))
    insurance_id = forms.CharField(max_length=10, required=True,
                                   widget=forms.TextInput(attrs={'class': 'form-control'}))
    insurance_provider = forms.CharField(max_length=30, required=True,
                                         widget=forms.TextInput(attrs={'class': 'form-control'}))
    main_hospital = forms.ModelChoiceField(queryset=Hospital.objects.all(), required=False, widget=forms.Select(
        attrs={'class': 'selectpicker show-tick form-control', 'required': ''}), empty_label="<Hospital>")
    emergency_contact_name = forms.CharField(max_length=50, required=False,
                                             widget=forms.TextInput(attrs={'class': 'form-control'}))
    emergency_contact_phone_number = forms.CharField(max_length=10, required=False,
                                                     widget=forms.TextInput(attrs={'class': 'form-control'}))
    password = forms.CharField(widget=forms.PasswordInput(attrs={'class': 'form-control'}))

    def clean_phone_number(self):
        """
            function:clean_phone_number
            -gives limitations for phone number field

            params: the registration form object
            -feeds data in to validate/clean

            variables:
            -

            postconditions
            -data has been validated


            """
        data = self.cleaned_data['phone_number']
        if len(data) >= 16:
            raise forms.ValidationError("Please enter a phone number of length less than 16")
        if any((not character.isdigit()) for character in data):
            raise forms.ValidationError("Only numbers please....")
        # Always return the cleaned data, whether you have changed it or not.
        return data

    def clean_first_name(self):  # doesn't allow letters in fist name
        data = self.cleaned_data['first_name']
        if any((not character.isalpha()) for character in data):
            raise forms.ValidationError("Only letters please")
        return data

    def clean_last_name(self):  # doesn't allow numbers in last name
        data = self.cleaned_data['last_name']
        if any((not character.isalpha()) for character in data):
            raise forms.ValidationError("Only letters please")
        return data

    def clean_emergency_contact_name(self):  # doesn't allow numbers in emergency contact name
        data = self.cleaned_data['emergency_contact_name']
        if data != '':  # only if they actually entered this in
            if any(character.isdigit() for character in data):
                raise forms.ValidationError("Only letters or spaces, please")
        return data

    def clean_emergency_contact_phone_number(self):  # doesn't allow letters in emergency contact phone number
        data = self.cleaned_data['emergency_contact_phone_number']
        if data != '':  # only if they entered this in the form
            if any((not character.isdigit()) for character in data):
                raise forms.ValidationError("Only numbers please")
        return data

    def clean_password(self):
        """
            function:clean_password
            -gives limitations for password

            params: the registration form object
            -feeds data in to validate/clean

            variables:
            -

            postconditions
            -data has been validated
        """
        data = self.cleaned_data['password']
        if len(data) < 7:
            raise forms.ValidationError("Your password is too short")
        # Always return the cleaned data, whether you have changed it or not.
        return data


class PatientUpdateForm(forms.ModelForm):
    """
    class_object: PatientUpdateForm(forms.ModelForm)
    Sub_Class:Meta
    """

    class Meta:
        model = Patient
        fields = ('first_name', 'last_name', 'medical_information', 'phone_number', 'emergency_contact_name',
                  'emergency_contact_phone_number', 'address')  # , "main_hospital")

    # email = forms.CharField(max_length=100, required=True, widget=forms.TextInput(attrs={'class': 'form-control'}))

    first_name = forms.CharField(max_length=25, required=True,
                                 widget=forms.TextInput(attrs={'class': 'form-control'}))
    last_name = forms.CharField(max_length=25, required=True,
                                widget=forms.TextInput(attrs={'class': 'form-control'}))
    address = forms.CharField(max_length=100, required=False,
                              widget=forms.TextInput(attrs={'class': 'form-control'}))
    phone_number = forms.CharField(max_length=10, required=False,
                                   widget=forms.TextInput(attrs={'class': 'form-control'}))
    emergency_contact_name = forms.CharField(max_length=50, required=False,
                                             widget=forms.TextInput(attrs={'class': 'form-control'}))
    emergency_contact_phone_number = forms.CharField(max_length=10, required=False,
                                                     widget=forms.TextInput(attrs={'class': 'form-control'}))
    # main_hospital = forms.ModelChoiceField(queryset=Hospital.objects.all(), required=False, widget=forms.Select(
    #    attrs={'class': 'selectpicker show-tick form-control'}), empty_label="<Hospital>")
    # only doctors and admins can change patient main hospital


class AppointmentForm(forms.ModelForm):
    """
    class_object: PatientRegistrationForm(forms.ModelForm)
    Sub_Class:Meta
    Methods: clean_phone_number, clean_password
    """

    class Meta:
        model = Appointment
        fields = ('patient', 'doctor', 'hospital', 'date', 'description')

    patient = forms.ModelChoiceField(queryset=Patient.objects.all(), required=False, widget=forms.Select(
        attrs={'class': 'selectpicker show-tick form-control', 'required': ''}), empty_label="<Patient>")
    doctor = forms.ModelChoiceField(queryset=Doctor.objects.all(), required=False, widget=forms.Select(
        attrs={'class': 'selectpicker show-tick form-control', 'required': ''}), empty_label="<Doctor>")
    hospital = forms.ModelChoiceField(queryset=Hospital.objects.all(), required=True, widget=forms.Select(
        attrs={'class': 'selectpicker show-tick form-control', 'required': ''}), empty_label="<Hospital>")
    date = forms.DateTimeField(initial=str(timezone.now())[:19])
    # date = datetime.datetime.now()
    # day = forms.DateField(widget=forms.TextInput(attrs={'type': 'date', 'class': 'form-control'}))
    # time = forms.DateField(widget=forms.TextInput(attrs={'type': 'time', 'class': 'form-control'}))
    description = forms.CharField(max_length=100, required=True,
                                  widget=forms.TextInput(attrs={'class': 'form-control'}))

    def clean_appointment_time(self):
        start_date = self.cleaned_data['start_date']
        end_date = self.cleaned_data['end_date']
        patient = self.cleaned_data['patient']
        doctor = self.cleaned_data['doctor']
        hospital = self.cleaned_data['hospital']
        act_start_date = timezone.make_aware(datetime.datetime.strptime(start_date, "%m/%d/%Y %I:%M %p"),
                                             timezone.get_default_timezone())
        act_end_date = timezone.make_aware(datetime.datetime.strptime(end_date, "%m/%d/%Y %I:%M %p"),
                                           timezone.get_default_timezone())
        has_hospital = False
        for h in doctor.hospitals:
            if h == hospital:
                has_hospital = True

        if not has_hospital:
            raise forms.ValidationError("That Doctor is not available at that hospital.")

        for appointment in patient.appointment_set:
            if act_start_date < appointment.start_date < act_end_date or \
                                    act_start_date < appointment.end_date < act_end_date:
                raise forms.ValidationError("That Patient is not available at that time.")

        for appointment in doctor.appointment_set:
            if act_start_date < appointment.start_date < act_end_date or \
                                    act_start_date < appointment.end_date < act_end_date:
                raise forms.ValidationError("That Doctor is not available at that time.")
    # date = timezone.make_aware(datetime.datetime.strptime(str(raw_date), "%m/%d/%Y %I:%M %p"),
    # timezone.get_default_timezone())
    # def __init__(self, *args, **kwargs):
    #     self.user = kwargs.pop('user', None)
    #     self.cleaned_data['date'] = datetime.datetime.combine(self.cleaned_data['day'], self.cleaned_data['time'])
    #     user_profile = self.user
    #     patient = kwargs.pop('patient', None)
    #     super(AppointmentForm, self).__init__(*args, **kwargs)
    #     if patient is not None:
    #         self.initial['patient'] = User.objects.filter(username=patient)[0]
    #     if type(patient) is Patient:
    #         if self.user is not None and user_profile.hospital is not None:
    #             self.initial['hospital'] = user_profile.hospital.id
    #         if self.user is not None and user_profile.doctor is not None:
    #             self.initial['doctor'] = user_profile.doctor.id


class UpdateAppointmentForm(forms.ModelForm):
    class Meta:
        model = Appointment
        fields = ('patient', 'doctor', 'hospital', 'start_date', 'end_date', 'description')

    patient = forms.ModelChoiceField(queryset=Patient.objects.all(), required=False, widget=forms.Select(
        attrs={'class': 'selectpicker show-tick form-control', 'required': ''}), empty_label="<Patient>")
    doctor = forms.ModelChoiceField(queryset=Doctor.objects.all(), required=False, widget=forms.Select(
        attrs={'class': 'selectpicker show-tick form-control', 'required': ''}), empty_label="<Doctor>")
    hospital = forms.ModelChoiceField(queryset=Hospital.objects.all(), required=True, widget=forms.Select(
        attrs={'class': 'selectpicker show-tick form-control', 'required': ''}), empty_label="<Hospital>")
    start_date = forms.DateTimeField()
    end_date = forms.DateTimeField()
    # day = forms.DateField(widget=forms.TextInput(attrs={'type': 'date', 'class': 'form-control'}))
    # time = forms.DateField(widget=forms.TextInput(attrs={'type': 'time', 'class': 'form-control'}))
    description = forms.CharField(max_length=100, required=True,
                                  widget=forms.TextInput(attrs={'class': 'form-control'}))

    def clean_appointment_time(self):
        start_date = self.cleaned_data['start_date']
        end_date = self.cleaned_data['end_date']
        patient = self.cleaned_data['patient']
        doctor = self.cleaned_data['doctor']
        hospital = self.cleaned_data['hospital']
        act_start_date = timezone.make_aware(datetime.datetime.strptime(start_date, "%m/%d/%Y %I:%M %p"),
                                             timezone.get_default_timezone())
        act_end_date = timezone.make_aware(datetime.datetime.strptime(end_date, "%m/%d/%Y %I:%M %p"),
                                           timezone.get_default_timezone())
        has_hospital = False
        for h in doctor.hospitals:
            if h == hospital:
                has_hospital = True

        if not has_hospital:
            raise forms.ValidationError("That Doctor is not available at that hospital.")

        for appointment in patient.appointment_set:
            if act_start_date < appointment.start_date < act_end_date or \
                                    act_start_date < appointment.end_date < act_end_date:
                raise forms.ValidationError("That Patient is not available at that time.")

        for appointment in doctor.appointment_set:
            if act_start_date < appointment.start_date < act_end_date or \
                                    act_start_date < appointment.end_date < act_end_date:
                raise forms.ValidationError("That Doctor is not available at that time.")


class LogSearchForm(forms.Form):
    # will work on this stuff later
    #    patient = forms.ModelChoiceField(queryset=Patient.objects.all(), required=False, widget=forms.Select(
    #        attrs={'class': 'selectpicker show-tick form-control'}), empty_label="<Patient>")
    #    doctor = forms.ModelChoiceField(queryset=Doctor.objects.all(), required=False, widget=forms.Select(
    #        attrs={'class': 'selectpicker show-tick form-control'}), empty_label="<Doctor>")
    #    nurse = forms.ModelChoiceField(queryset=Nurse.objects.all(), required=False, widget=forms.Select(
    #        attrs={'class': 'selectpicker show-tick form-control'}), empty_label="<Nurse>")
    hospital = forms.ModelChoiceField(queryset=Hospital.objects.all(), required=False, widget=forms.Select(
        attrs={'class': 'selectpicker show-tick form-control'}), empty_label="<Hospital>")
    user_email = forms.CharField(max_length=50, required=False)
    start_time = forms.DateTimeField(initial='2000-01-01\t00:00:00')
    end_time = forms.DateTimeField(initial='2099-12-31\t23:59:59')
