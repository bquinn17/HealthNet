from django.shortcuts import render, render_to_response

from .forms import PatientRegistrationForm
from .models import *
from django.http import HttpResponse, HttpResponseRedirect
from django.contrib import auth
from django.template.context_processors import csrf
from django.template import loader
from django.contrib.admin.models import LogEntry, ADDITION, DELETION
from django.contrib.contenttypes.models import ContentType

def home_page(request):
    return render(request, 'health/index.html')


def patient_registration(request):
    if request.method == "POST":
        form = PatientRegistrationForm(request.POST)
        if form.is_valid():
            patient = form.save(commit=False)
            if Patient.objects.filter(email=patient.email).exists():
                return HttpResponse("That email was already used")
            else:
                patient.username = patient.email
                patient.save()
                return HttpResponse("Congratulations! You registered a new user.")
        else:
            return HttpResponse(form.errors + "That user is not valid")
    else:
        form = PatientRegistrationForm()
        return render(request, 'health/register.html', {'form': form})


def update_object_history(request, obj, position, action, message=None):
    """ Update object history if turned on """
    # if not position_settings.UPDATE_OBJECT_HISTORY:
    #     return

    if not message:
        if action == ADDITION:
            action_message = 'added'
        elif action == DELETION:
            action_message = 'removed'
        else:
            action_message = 'changed'
        message = 'Position %s was %s. ' % (position, action_message)

    from django.utils.encoding import force_unicode
    LogEntry.objects.log_action(
        user_id=request.user.pk,
        content_type_id=ContentType.objects.get_for_model(obj).pk,
        object_id=obj.pk,
        object_repr=force_unicode(obj),
        action_flag=action,
        change_message=message
    )


def login(request):
    dictionary = {}
    dictionary.update(csrf(request))
    return render_to_response("health/login.html", dictionary)


def auth_view(request):
    username = request.POST.get('username', '')  # if no value found in dictionary, return empty string
    password = request.POST.get('password', '')
    user = auth.authenticate(username=username, password=password)

    if user is not None:
        auth.login(request, user)
        return loggedin(request)  # HttpResponseRedirect('/accounts/loggedin/')
    else:
        return invalid_login(request)  # HttpResponseRedirect('/accounts/invalid/')


def loggedin(request):
    return render_to_response('health/loggedin.html',
                              {'full_name': request.user.username})


def invalid_login(request):
    return render_to_response('health/invalid_login.html')


def logout(request):
    auth.logout(request)
    return render_to_response('health/logout.html')


def appointments(request):
    return HttpResponse("These are the appoints")


def calendar(request):
    template = loader.get_template('health/calendar.html')
    appointment_list = []

    if isinstance(request.user, Nurse):
        for a in Appointment.objects.all():
            if a.hospital == Nurse.working_hospital:
                appointment_list.append(a)
    elif isinstance(request.user, Patient) or isinstance(request.user, Doctor):
        appointment_list = request.user.appointments

    context = {
        'appointment_list': appointment_list,
    }

    return HttpResponse(template.render(context, request))


def error_page(request):
    return render_to_response('health/notFound.html')
